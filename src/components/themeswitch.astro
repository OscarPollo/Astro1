<div class="inline-flex items-center">
  <label id="themeSwitch">
    <input type="checkbox" id="themeToggle" />
    <span class="slider"></span>
  </label>
  
</div>


<style>
  :global(.dark) {
    color-scheme: dark;
  }
  #themeSwitch {
  position: relative;
  display: inline-block;
  width: 50px;
  height: 24px;
}

#themeSwitch input {
  opacity: 0;
  width: 0;
  height: 0;
}

.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  border-radius: 24px;
  transition: background-color 0.3s;
}

.slider::before {
  position: absolute;
  content: "";
  height: 18px;
  width: 18px;
  left: 3px;
  bottom: 3px;
  background-color: white;
  border-radius: 50%;
  transition: transform 0.3s;
}

input:checked + .slider {
  background-color: #2196f3;
}

input:checked + .slider::before {
  transform: translateX(26px);
}
</style>


<script>
  const themeToggle = document.getElementById("themeToggle") as HTMLInputElement;
const savedTheme = localStorage.getItem("theme");
const systemTheme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";

// Establece el estado inicial del switch y el tema
if (savedTheme === "dark" || (savedTheme === null && systemTheme === "dark")) {
  themeToggle.checked = true;
  document.documentElement.classList.add("dark");
} else {
  document.documentElement.classList.add("light");
}

// FunciÃ³n para actualizar el tema
function updateTheme(isDarkMode: boolean) {
  document.documentElement.classList.remove("light", "dark");
  const theme = isDarkMode ? "dark" : "light";
  document.documentElement.classList.add(theme);
  localStorage.setItem("theme", theme);
}

// Listener para el cambio de estado del switch
themeToggle.addEventListener("change", () => {
  updateTheme(themeToggle.checked);
});

</script>